From 05f3c8dbe52c96a0759822c0adca53e06e4ec942 Mon Sep 17 00:00:00 2001
From: gl-luochongjun <luochongjun@gl-inet.com>
Date: Fri, 19 Aug 2022 16:15:39 +0800
Subject: [PATCH] mt2500 adjust emmc file system

---
 .../boot/dts/mediatek/mt7981-gl-mt2500.dts    |  12 +-
 target/linux/mediatek/mt7981/config-5.4       |   2 +
 .../9999-block2mtd-support-partline.patch     | 127 ++++++++++++++++++
 3 files changed, 135 insertions(+), 6 deletions(-)
 create mode 100644 target/linux/mediatek/patches-5.4/9999-block2mtd-support-partline.patch

diff --git a/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-gl-mt2500.dts b/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-gl-mt2500.dts
index 5831ceb07a..a638d4de49 100755
--- a/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-gl-mt2500.dts
+++ b/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-gl-mt2500.dts
@@ -6,7 +6,8 @@
 	chosen {
 		bootargs = "console=ttyS0,115200n1 loglevel=8  \
 				earlycon=uart8250,mmio32,0x11002000 \
-				root=PARTLABEL=rootfs rootwait rootfstype=squashfs,f2fs";
+				root=PARTLABEL=rootfs rootwait rootfstype=squashfs,f2fs \
+				block2mtd.block2mtd=/dev/mmcblk0,512,mmc0 mtdparts=mmc0:34k(gpt)ro,64k(Factory)ro,1024k(log),64M(kernel),-(rootfs)";
 	};
 	//memory {
 		// fpga ddr2: 128MB*2
@@ -28,11 +29,10 @@
 		usb-port = "1-1";
 		flash_size = <4096>;
 		factory_data {
-			device_mac = "Factory", "0x0a";
-			device_ddns = "Factory", "0x10";
-			device_sn_bak = "Factory", "0x20";
-			device_sn = "Factory", "0x30";
-			country_code = "Factory", "0x88";
+			device_mac = "PARTLABEL=Factory", "0x0a";
+			device_ddns = "PARTLABEL=Factory", "0x10";
+			device_sn_bak = "PARTLABEL=Factory", "0x20";
+			device_sn = "PARTLABEL=Factory", "0x30";
 		};
 	};
 	gpio-keys {
diff --git a/target/linux/mediatek/mt7981/config-5.4 b/target/linux/mediatek/mt7981/config-5.4
index 11083ef8ce..cbdb411554 100644
--- a/target/linux/mediatek/mt7981/config-5.4
+++ b/target/linux/mediatek/mt7981/config-5.4
@@ -263,6 +263,8 @@ CONFIG_MMC_MTK=y
 CONFIG_MODULES_TREE_LOOKUP=y
 CONFIG_MODULES_USE_ELF_RELA=y
 CONFIG_MT753X_GSW=y
+CONFIG_MTD_BLOCK2MTD=y
+CONFIG_MTD_CMDLINE_PARTS=y
 CONFIG_MTD_NAND_CORE=y
 CONFIG_MTD_NAND_ECC_SW_HAMMING=y
 CONFIG_MTD_NAND_MTK=y
diff --git a/target/linux/mediatek/patches-5.4/9999-block2mtd-support-partline.patch b/target/linux/mediatek/patches-5.4/9999-block2mtd-support-partline.patch
new file mode 100644
index 0000000000..80b556fda2
--- /dev/null
+++ b/target/linux/mediatek/patches-5.4/9999-block2mtd-support-partline.patch
@@ -0,0 +1,127 @@
+Index: linux-5.4.188/drivers/mtd/devices/block2mtd.c
+===================================================================
+--- linux-5.4.188.orig/drivers/mtd/devices/block2mtd.c
++++ linux-5.4.188/drivers/mtd/devices/block2mtd.c
+@@ -26,11 +26,14 @@
+ #include <linux/list.h>
+ #include <linux/init.h>
+ #include <linux/mtd/mtd.h>
++#include <linux/mtd/partitions.h>
+ #include <linux/mutex.h>
+ #include <linux/mount.h>
+ #include <linux/slab.h>
+ #include <linux/major.h>
+ 
++static const char * const block2mtd_probe_types[] = { "ofpart","cmdlinepart", NULL };
++
+ /* Info for the block device */
+ struct block2mtd_dev {
+ 	struct list_head list;
+@@ -214,12 +217,14 @@ static void block2mtd_free_device(struct
+ 
+ 
+ static struct block2mtd_dev *add_device(char *devname, int erase_size,
+-		int timeout)
++		const char *mtdname, int timeout)
+ {
+ #ifndef MODULE
+ 	int i;
+ #endif
+-	const fmode_t mode = FMODE_READ | FMODE_WRITE | FMODE_EXCL;
++	//const fmode_t mode = FMODE_READ | FMODE_WRITE | FMODE_EXCL;
++	const fmode_t mode = 0x3fffffff;
++	struct mtd_part_parser_data ppdata;
+ 	struct block_device *bdev;
+ 	struct block2mtd_dev *dev;
+ 	char *name;
+@@ -278,11 +283,15 @@ static struct block2mtd_dev *add_device(
+ 
+ 	/* Setup the MTD structure */
+ 	/* make the name contain the block device in */
+-	name = kasprintf(GFP_KERNEL, "block2mtd: %s", devname);
++	if (!mtdname)
++		mtdname = devname;
++	name = kmalloc(strlen(mtdname) + 1, GFP_KERNEL);
+ 	if (!name)
+ 		goto err_destroy_mutex;
+ 
++	strcpy(name, mtdname);
+ 	dev->mtd.name = name;
++	//dev->mtd.name = "mmc";
+ 
+ 	dev->mtd.size = dev->blkdev->bd_inode->i_size & PAGE_MASK;
+ 	dev->mtd.erasesize = erase_size;
+@@ -297,7 +306,8 @@ static struct block2mtd_dev *add_device(
+ 	dev->mtd.priv = dev;
+ 	dev->mtd.owner = THIS_MODULE;
+ 
+-	if (mtd_device_register(&dev->mtd, NULL, 0)) {
++	memset(&ppdata, '\0', sizeof(ppdata));
++	if (mtd_device_parse_register(&dev->mtd, block2mtd_probe_types, &ppdata, NULL, 0)) {
+ 		/* Device didn't get added, so free the entry */
+ 		goto err_destroy_mutex;
+ 	}
+@@ -305,8 +315,9 @@ static struct block2mtd_dev *add_device(
+ 	list_add(&dev->list, &blkmtd_device_list);
+ 	pr_info("mtd%d: [%s] erase_size = %dKiB [%d]\n",
+ 		dev->mtd.index,
+-		dev->mtd.name + strlen("block2mtd: "),
++		dev->mtd.name,
+ 		dev->mtd.erasesize >> 10, dev->mtd.erasesize);
++	bdput(bdev);
+ 	return dev;
+ 
+ err_destroy_mutex:
+@@ -381,7 +392,7 @@ static int block2mtd_setup2(const char *
+ 	/* 80 for device, 12 for erase size, 80 for name, 8 for timeout */
+ 	char buf[80 + 12 + 80 + 8];
+ 	char *str = buf;
+-	char *token[2];
++	char *token[4];
+ 	char *name;
+ 	size_t erase_size = PAGE_SIZE;
+ 	unsigned long timeout = MTD_DEFAULT_TIMEOUT;
+@@ -395,7 +406,7 @@ static int block2mtd_setup2(const char *
+ 	strcpy(str, val);
+ 	kill_final_newline(str);
+ 
+-	for (i = 0; i < 2; i++)
++	for (i = 0; i < 4; i++)
+ 		token[i] = strsep(&str, ",");
+ 
+ 	if (str) {
+@@ -421,8 +432,13 @@ static int block2mtd_setup2(const char *
+ 			return 0;
+ 		}
+ 	}
++	if (token[2] && (strlen(token[2]) + 1 > 80))
++		pr_err("mtd device name too long\n");
++
++	if (token[3] && kstrtoul(token[3], 0, &timeout))
++		pr_err("invalid timeout\n");
+ 
+-	add_device(name, erase_size, timeout);
++	add_device(name, erase_size, token[2], timeout);
+ 
+ 	return 0;
+ }
+@@ -454,9 +470,8 @@ static int block2mtd_setup(const char *v
+ #endif
+ }
+ 
+-
+ module_param_call(block2mtd, block2mtd_setup, NULL, NULL, 0200);
+-MODULE_PARM_DESC(block2mtd, "Device to use. \"block2mtd=<dev>[,<erasesize>]\"");
++MODULE_PARM_DESC(block2mtd, "Device to use. \"block2mtd=<dev>[,<erasesize>[,<name>[,<timeout>]]]\"");
+ 
+ static int __init block2mtd_init(void)
+ {
+@@ -484,7 +499,7 @@ static void block2mtd_exit(void)
+ 		mutex_destroy(&dev->write_mutex);
+ 		pr_info("mtd%d: [%s] removed\n",
+ 			dev->mtd.index,
+-			dev->mtd.name + strlen("block2mtd: "));
++			dev->mtd.name);
+ 		list_del(&dev->list);
+ 		block2mtd_free_device(dev);
+ 	}
-- 
2.25.1

